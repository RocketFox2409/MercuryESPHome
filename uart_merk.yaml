esphome:
  name: uart_merk
  platform: ESP8266
  board: d1_mini
  includes:
    - mercury-200.02.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passwd

  ap:
    ssid: "Uart Merk Fallback Hotspot"
    password: !secret ap_passwd

captive_portal:

logger:
  level: VERY_VERBOSE
  baud_rate: 0

api:
  password: !secret api_passwd

ota:
  password: !secret ota_passwd

web_server:
  port: 80

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600

status_led:
  pin: D4

switch:

  - platform: restart
    name: "Restart"

sensor:

  - platform: uptime
    id: Uptime

  - platform: template
    id: Volts
    name: "Volts"
    icon: "mdi:alpha-v-circle-outline"
    unit_of_measurement: "V"
    accuracy_decimals: 1
    lambda: "return {};"

  - platform: template
    id: Amps
    name: "Amps"
    icon: "mdi:alpha-a-circle-outline"
    unit_of_measurement: "A"
    accuracy_decimals: 2
    lambda: "return {};"

  - platform: template
    id: Watts
    name: "Watts"
    icon: "mdi:alpha-p-circle-outline"
    unit_of_measurement: "KWt*H"
    accuracy_decimals: 3
    lambda: "return {};"

  - platform: template
    id: Tariff1
    name: "Tariff1"
    icon: "mdi:counter"
    unit_of_measurement: "KWt"
    accuracy_decimals: 2
    lambda: "return {};"

  - platform: template
    id: Tariff2
    name: "Tariff2"
    icon: "mdi:counter"
    unit_of_measurement: "KWt"
    accuracy_decimals: 2
    lambda: "return {};"

  - platform: template
    id: Sum_Tariff
    name: "Sum_Tariff"
    icon: "mdi:counter"
    unit_of_measurement: "KWt"
    accuracy_decimals: 2
    lambda: "return {};"

custom_component: 

  - lambda: |-
      auto my_mercury = new Mercury(id(uart_bus), id(Volts), id(Amps), id(Watts), id(Tariff1), id(Tariff2), id(Sum_Tariff));
      App.register_component(my_mercury);
      return {my_mercury};

text_sensor:

  - platform: template
    name: "uptime"
    lambda: |-
      uint32_t uptime = (id(Uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
        return { (String(minutes) + " мин.").c_str() };
      }
    update_interval: 60s
    icon: mdi:clock-start